{
手写Spring-IOC容器
(https://ke.qq.com/course/2706807?taid=9686976616287607);
学习笔记
}
{
spring的核心:ioc+aop;

ioc:
inversion of control,依赖倒置,控制反转;
依赖对象的获取反转了,
"由使用者自己创建" 反转为 "从IOC容器获取";

ioc的优势:
1,代码简洁,不需要手动new对象了;
2,面向接口编程,使用者与具体累解藕,易扩展、替换实现者;
3,方便实现aop;

ioc容器的工作:
负责创建、管理实例对象,供使用者使用;

ioc容器是否是工厂模式的实例?
是的。ioc容器也称为bean工厂。


BeanDefinition
用途:告诉ioc容器如何创建bean;

告诉哪些信息:
1,构造方法(类)->getBeanClass();
2,静态工厂方法->getFactoryMethodName();
3,成员工厂方法->getFactoryBeanName();

}
{
BeanFactory实现
最基础的版本:DefaultBeanFactory;
主要功能:
1,实现定义信息注册;
2,实现Bean工厂;
3,实现单例;
4,容器关闭时销毁单例;

实现接口:BeanFactory,BeanDefinitionRegistry;

实现4个方法:
registerBeanDefinition();
getBeanDefinition();
containsBeanDefinition();
getBean();

代码在com.myspring.DefaultBeanFactory;


}
{
思考:对于单例bean,可否提前实例化,有什么好处?

preInstantiateSingleton();


}
{

IOC容器加功能:
1,Bean增加别名;
2,BeanFactory按type获取bean;


Type->beanName->bean_instance



}






